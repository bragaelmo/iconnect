<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>{{title}}</title>
    <!-- Favicon-->
    <link rel="icon" href="/images/icone.png">
    <!-- project css file  -->
    <link rel="stylesheet" href="/css/estilo.css">
    <link rel="stylesheet" href="/css/emojionearea.css">

    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  </head>
  <span id="my-mail" style="display:none">{{ sessionEmail }}</span>
  <span id="my-host" style="display:none">{{ sessionHost }}</span>
  {{#if_cond login '!=' ''}}
  <body>
  {{else}}
  <body style="background-color: #075E54;">
  {{/if_cond}}

    {{#if_cond container '==' false}}
    <div>
    {{else}}
    <div class="container">
    {{/if_cond}}


      {{{body}}}


    </div>
  <!-- Jquery Core Js -->
  {{!-- <script src="/js/libscripts.bundle.js"></script> --}}
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://cdn.jsdelivr.net/npm/emojionearea@3.4.2/dist/emojionearea.min.js"></script>
<script>
          //Checar se a zenvia envia emoji
           // $('#textarea').emojioneArea({
           //     pickerPosition: "top"
           // });//

    const HOST = document.getElementById('my-host').innerText

    var server = HOST;
    var socket = io.connect(server);

    //render all messages that received
    socket.on("receivedMessage", (data) => {
        initialSocket(data)
    })

    function initialSocket(data){
      const phoneChat = document.getElementById("chat-client-phone").innerText
      const chatOpen = document.getElementById("chat-client-name").innerText
      var renderChatAutomatic = false

      if(phoneChat == data.fromClient){
        renderChatAutomatic = true
      }

      if(chatOpen != ''){
        changeStatus(data.atendimentoId, renderChatAutomatic)
      }

      if($('#em-espera-style').hasClass('active')){
        startListClients()
      } else if ($('#em-atendimento-style').hasClass('active')) {
        startListClientsEmAtendimento()
      }

      //Parte para adiconar no sininho se tem notificação
      var not = parseInt(document.getElementById('noti').innerText);
      not = not + 1;
      document.getElementById('noti').innerHTML = not;
      document.getElementById('noti2').innerHTML = not;
    }

    function renderMessageInChat(obj){
        const chatBody = document.getElementById('chatBody');

        const dateTime = obj.timeMsg.split('T')
        const date = dateTime[0].split('-')
        const dateFinish = `${date[2]}-${date[1]}-${date[0]}`
        const time = dateTime[1].split('.')[0].split(':')
        // Ordem exemplo: 26-09-2022 10:40
        const timeFinish = ` ${dateFinish} ${time[0]}:${time[1]}`
        obj.timeMsg = timeFinish


        if(obj.isClient){
          chatClient(obj)
        }
      }

      var query = location.search.slice(1);
      var partes = query.split('&');
      var data = {};
      partes.forEach(function (parte) {
          var chaveValor = parte.split('=');
          var chave = chaveValor[0];
          var valor = chaveValor[1];
          data[chave] = valor;
      });

    function chatClient(obj){
       chatBody.insertAdjacentHTML("beforeend",`
                <li class="mb-3 d-flex flex-row align-items-end" id="messageOpen">
                    <div class="max-width-70">
                        <div class="user-info mb-1">
                            <span class="text-muted small">
                              <br> ${obj.name}:
                            </span>
                        </div>
                        <div class="card border-0 p-3">
                            <div class="message"><p>${obj.body}</p> <p class="dateHourChat"> ${obj.timeMsg} </p></div>
                        </div>
                    </div>
                </li>`
            )
    }

    function chatAtendente(obj){
       chatBody.insertAdjacentHTML("beforeend",`
          <li class="mb-3 d-flex flex-row justify-content-end" id="messageOpen">
              <div class="max-width-70">
                  <div class="user-info mb-1">
                      <span class="text-muted small">
                      <br>Robo Zenvia:</span>
                  </div>
                  <div class="card border-0 p-3">
                      <div class="message"><p>${obj.body}</p> <p class="dateHourChat"> ${obj.timeMsg} </p></div>
                  </div>
              </div>
        </li>`)
    }
            //headerClient chatBody chatFooter

    disableComponents()
    function disableComponents(){
      document.getElementById("headerClient").style.display = "none";
      document.getElementById("headerClientEmpty").style.display = "block";
      document.getElementById("chatBody").style.display = "none";
      document.getElementById("chatBodyEmpty").style.display = "block";
      document.getElementById("buttonMoverAtendimentoDiv").style.display = "none";
      document.getElementById("chatFooter").style.display = "none";
      document.getElementById("chatFooterEmpty").style.display = "block";
      document.getElementById("chat-client-name").innerText = ''
      document.getElementById("chat-client-photo").src = ''
      document.getElementById("chat-client-type").innerText = ''
      document.getElementById("chat-client-phone").innerText = ''
      document.getElementById("chat-client-atendimento-id").innerText = ''
      document.getElementById("chat-received-zenvia-number").innerText = ''
    }

    startListClients()
    function startListClients(){
      $('.msg').fadeOut(600, function(){ $(this).remove();});
      const email = document.getElementById('my-mail').innerText
      fetch(HOST+'/wpp/last-message-client', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({email: email}),
      })
      .then(res => res.json())
      .then(data => {
        for(clients of data){
          const client = {
            clientNumber: clients.from_wa_id,
            clientName: clients.name,
            timeMsg: clients.messageCreatedAt,
            clientMsg: clients.body,
            atendimentoId: clients.atendimentoId,
            atendimentoStatus: clients.atendimentoStatus,
            atendimentoUserId: clients.atendimentoUserId,
            transferBy: clients.transfer_by
          }

          renderInMessageVisualizer(client);
        }
      })
      .catch(e => console.log(e));
    }

    function renderInMessageVisualizer(obj){
      const dateTime = obj.timeMsg.split('T')
      const date = dateTime[0].split('-')
      const dateFinish = `${date[2]}-${date[1]}-${date[0]}`
      const time = dateTime[1].split('.')[0].split(':')
      // Ordem exemplo: 26-09-2022 10:40
      const timeFinish = ` ${dateFinish} ${time[0]}:${time[1]}`
      obj.timeMsg = timeFinish

        $('#contact_area').prepend(
            `<div class="msg">
                <a onclick="changeStatus(${obj.atendimentoId})">
                <span id="infoMsg"></span>
                <li class="list-group-item px-md-4 py-3 py-md-4 n${obj.clientNumber}">
                    <div class="d-flex">
                        <img class="avatar lg rounded-circle img-thumbnail" style="border: 1px solid silver; text-align: center;" src="https://ui-avatars.com/api/?name=${obj.clientName}&background=random&color=ff0000&bold=true">
                        <div class="flex-fill ms-3 text-truncate">
                            <h6 class="d-flex justify-content-between mb-0"><span><b>${obj.clientName}</b></span> <small class="msg-time"><b>${obj.timeMsg}</b></small></h6>
                            <span class="text-muted"> <i class="icofont-swoosh-right   fs-5"></i></span>
                            ${obj.clientMsg}
                        </div>
                    </div>
                </li>
                </a>
            </div>`
        )
    }

    //startListClientsEmAtendimento()
    function startListClientsEmAtendimento(){
      $('.msg').fadeOut(600, function(){ $(this).remove();});
      const email = document.getElementById('my-mail').innerText
      fetch(HOST+'/wpp/last-message-client-in-service', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({email: email}),
      })
      .then(res => res.json())
      .then(data => {
        for(clients of data){
          const client = {
              clientNumber: clients.from_wa_id,
              clientName: clients.name,
              timeMsg: clients.messageCreatedAt,
              clientMsg: clients.body,
              atendimentoId: clients.atendimentoId,
              atendimentoStatus: clients.atendimentoStatus,
              atendimentoUserId: clients.atendimentoUserId
          }
          renderInMessageVisualizerEmAtendimento(client);
        }
      })
      .catch(e => console.log(e));
    }

    onclickCloseChatBody()
    function onclickCloseChatBody(){
      document.getElementById("em-atendimento-style").setAttribute('onclick', `closeChatBodyEspera()`)
      document.getElementById("em-espera-style").setAttribute('onclick', `closeChatBodyAtendimento()`)
    }
    function closeChatBodyEspera(){
      document.getElementById('chatBody').innerHTML = ''
      disableComponents()
      startListClientsEmAtendimento()
    }
    function closeChatBodyAtendimento(){
      document.getElementById('chatBody').innerHTML = ''
      disableComponents()
      startListClients()
    }

    function renderInMessageVisualizerEmAtendimento(obj){
      const dateTime = obj.timeMsg.split('T')
      const date = dateTime[0].split('-')
      const dateFinish = `${date[2]}-${date[1]}-${date[0]}`
      const time = dateTime[1].split('.')[0].split(':')
      // Exemplo timefinish: 26-09-2022 10:40
      const timeFinish = ` ${dateFinish} ${time[0]}:${time[1]}`
      obj.timeMsg = timeFinish

      $('#contact_area_atendimento').prepend(
          `<div class="msg">
            <a onclick="changeStatus(${obj.atendimentoId})" >
              <li class="list-group-item px-md-4 py-3 py-md-4 n${obj.clientNumber}">
                  <div class="d-flex">
                      <img class="avatar lg rounded-circle img-thumbnail" style="border: 1px solid silver; text-align: center;" src="https://ui-avatars.com/api/?name=${obj.clientName}&background=random&color=ff0000&bold=true">
                      <div class="flex-fill ms-3 text-truncate">
                          <h6 class="d-flex justify-content-between mb-0"><span>${obj.clientName}</span> <small class="msg-time">${obj.timeMsg}</small></h6>
                          <span class="text-muted"> <i class="icofont-swoosh-right   fs-5"></i></span>
                          ${obj.clientMsg}
                      </div>
                  </div>
              </li>
            </a>
          </div>`
      )
    }

    function renderMessagesInChat(arr){
      //render info in chat

      var nameClient = ''
      var phoneClient = ''
      var statusClient = ''
      var atendimentoId = ''
      var roboNumber = ''

      // Apaga as mensagens em aberto do chat
      document.getElementById('chatBody').innerHTML = ''

      for(item of arr){
        var timeMsg = item.created_at;

        const dateTime = timeMsg.split('T')
        const date = dateTime[0].split('-')
        const dateFinish = `${date[2]}-${date[1]}-${date[0]}`
        const time = dateTime[1].split('.')[0].split(':')
        // Ordem exemplo: 26-09-2022 10:40
        const timeFinish = `${dateFinish} ${time[0]}:${time[1]}`
        item.timeMsg = timeFinish

        if(item.perfil == 'CLIENTE'){
          chatClient(item)
          nameClient = item.name
          statusClient = item.status
          phoneClient = item.from_wa_id
          atendimentoId = item.atendimento_id
          roboNumber= item.to_wa
        }

        if(item.perfil == 'ATENDENTE'){
          chatAtendente(item)
        }
      }

      document.getElementById("buttonMoverAtendimentoDiv").style.display = "block";
      document.getElementById("chat-client-name").innerText = nameClient;
      document.getElementById("chat-client-photo").src = `https://ui-avatars.com/api/?name=${nameClient}&background=random&color=ff0000&bold=true`;
      document.getElementById("chat-client-type").innerText = statusClient
      document.getElementById("chat-client-phone").innerText = phoneClient;
      document.getElementById("chat-client-atendimento-id").innerText = atendimentoId;
      document.getElementById("chat-received-zenvia-number").innerText = roboNumber;

      if (statusClient == 'EM_ATENDIMENTO'){
        document.getElementById("buttonMoverAtendimento").style.display = "block";
        document.getElementById("buttonMoverAtendimento").setAttribute('onclick', `listAtendentes()`)
        document.getElementById("buttonAtender").style.display = 'none'
        document.getElementById("chatFooterEmpty").style.display = 'none'
        document.getElementById("chatFooter").style.display = 'block'
      } else {
        document.getElementById("chatFooter").style.display = "none";
        document.getElementById("buttonAtender").style.display = "block";
        document.getElementById("buttonAtender").setAttribute('onclick', `butAtender(${atendimentoId})`)
        document.getElementById("chatFooterEmpty").style.display = "block";
        document.getElementById("buttonMoverAtendimento").style.display = 'none'
      }

      // Scroll to message more recent
      chatBody.scrollTop = chatBody.scrollHeight;
    }

    function updateStatusAtendimento(atendimentoId, userEmail){
      fetch(HOST+'/wpp/updatestatus', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({atendimentoId, userEmail}),
      })

      //disableComponents()
      //location.reload()
    }

//    function modalMoverAtendimento(clientNumber){
  //      let messageOpen = document.getElementById("chatBody").style.display
    //    if (messageOpen === 'block'){
            // $('#modalCloseMessage').modal('show')
      //      const clientName = document.getElementById("chat-client-name").innerText
        //    $('#spanInBodyModalCloseMessage').text("Mover o atendimento de "+clientName+" ("+clientNumber+") para a fila de " )
          //  document.getElementById("buttonMover").setAttribute('onclick', `updateStatusAtendimento(${clientNumber})`)
        //}
    //}

    function butAtender(atendimentoId){
      var userEmail = document.getElementById('my-mail').innerText
      var phoneChat = document.getElementById("chat-client-phone").innerText


      updateStatusAtendimento(atendimentoId, userEmail)

      $('#em-atendimento-style').addClass('active')
      $('#em-espera-style').removeClass('active')
      $('#em-atendimento').addClass('active')
      $('#em-atendimento').addClass('show')
      initialSocket({fromClient: phoneChat, atendimentoId})
    }

    function enableComponents(){
      document.getElementById("headerClient").style.display = "block";
      document.getElementById("headerClientEmpty").style.display = "none";
      document.getElementById("chatBody").style.display = "block";
      document.getElementById("chatBodyEmpty").style.display = "none";
    }

    function changeStatus(atendimentoId, renderAutomatic = true){
            //render msg of DB
      if (typeof atendimentoId !== 'undefined') {
          //RENDER MESSAGES IN CHAT
          fetch(HOST+'/wpp/message-chat-client', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({atendimento_id: atendimentoId}),
          }).then(res => res.json())
            .then(data => {
              //render msg chat
                if(renderAutomatic){
                  renderMessagesInChat(data);
                  enableComponents()
                }
            })
            .catch(err => {
            console.log(err)
          })

      } else {
        disableComponents()
      }
    }

    function listAtendentes(){
      document.getElementById("listAtendentes").innerText = ''

      fetch(HOST+'/list-atendentes')
      .then(res => res.json())
      .then(atendentes => {
          if (atendentes.length > 0){
            for (var atendente of atendentes){
              renderListAtendentesForTransfer(atendente);
            }
          }
      })
      .catch(err => {
      console.log(err)
      })
    }


    function renderListAtendentesForTransfer(atendente){
      $('#listAtendentes').prepend(
        `<div class="py-2 d-flex align-items-center border-bottom flex-wrap">
          <a onclick="preparaTransferencia('${atendente.email}::${atendente.fullName}::${atendente.perfil}')" >
            <div class="d-flex align-items-center flex-fill">
                <img class="avatar lg rounded-circle img-thumbnail" style="border: 1px solid silver; text-align: center;" src="https://ui-avatars.com/api/?name=${atendente.fullName}&background=random&color=ff0000&bold=true">
                <div class="d-flex flex-column ps-3">
                    <h6 class="fw-bold mb-0 small-14">${atendente.fullName}</h6>
                    <span class="text-muted">${atendente.email}</span>
                    <div class="text-muted"><i class="icofont-engineer"></i> ${atendente.perfil} | ${atendente.setor} </div>
                </div>
            </div>
            </a>
        </div>`
      )
    }

    function preparaTransferencia(atendente){
      var emailAtendenteFromTransfer = document.getElementById('my-mail').innerText
      var emailAtendenteToTransfer = atendente.split('::')[0]
      var nameAtendente = atendente.split('::')[1]
      var perfilAtendente = atendente.split('::')[2].toLowerCase()

      var atendimentoId = document.getElementById("chat-client-atendimento-id").innerText

      var nameClient = document.getElementById("chat-client-name").innerText
      var phoneClient = document.getElementById("chat-client-phone").innerText

      var phoneRobo = document.getElementById("chat-received-zenvia-number").innerText

      var response = confirm(`Transferir o atendimento de ${nameClient} para o ${perfilAtendente} ${nameAtendente}?`);

      if (response){
        fetch(HOST+'/transfer-service', {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            atendimentoId,
            emailAtendenteFromTransfer,
            emailAtendenteToTransfer,
            phoneClient,
            phoneRobo
            }),
        })
        location.reload()
      }
    }

    function sendmsg(){
      msg = document.getElementById('textarea').value;
      var chatBody = document.getElementById('chatBody');
      var chatPhone = document.getElementById("chat-client-phone").innerText;
      var chatAtendimentoId = document.getElementById("chat-client-atendimento-id").innerText;
      var roboNumber = document.getElementById("chat-received-zenvia-number").innerText;

      if(msg){
          sendMessageToClient(chatPhone, msg, chatAtendimentoId, roboNumber);
          chatAtendente({body: msg, timeMsg: ''})
      }

      chatBody.scrollTop = chatBody.scrollHeight;
      document.getElementById('textarea').value = '';
    }

    //Função da rota pra enviar para o cliente
    function sendMessageToClient(clientNumber, message, chatAtendimentoId, roboNumber){
      fetch(HOST+'/wpp/send-message',{
      //fetch('https://localhost:3000/wpp/send-message', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({clientNumber, message, chatAtendimentoId, roboNumber}),
      })
    }

        </script>
        <script>
          function msgErroLogin(){
            Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Email ou senha incorreto!'
            })
          }
           function cadastromsg(){
           Swal.fire({
              title:'Sucesso!',
              text:'Cadastro realizado com sucesso!',
              icon:'success'
           })
          }

         /* if({{message}}){
            msgErroLogin();

          }     */
        </script>
        <!-- Jquery Core Js -->
        <script src="/bundles/libscripts.bundle.js"></script>
        <!-- Plugin Js-->
        <!-- <script src="/bundles/apexcharts.bundle.js"></script>
        <!-- Jquery Page Js -->
        <!-- tawk chat -->
        <script src="/js/template.js"></script>
        <script src="/js/page/hr.js"></script>

  </body>
</html>
